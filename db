import sqlite3
import logging
import asyncio
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.filters import Command

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π"""
    with sqlite3.connect('bot_database.db') as conn:
        cursor = conn.cursor()

        # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            username TEXT,
            first_name TEXT NOT NULL,
            last_name TEXT,
            language_code TEXT,
            is_bot INTEGER DEFAULT 0,
            registration_date TEXT NOT NULL,
            last_activity TEXT NOT NULL
        )''')

        # –¢–∞–±–ª–∏—Ü–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        cursor.execute('''
        CREATE TABLE IF NOT EXISTS messages (
            message_id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            chat_id INTEGER NOT NULL,
            text TEXT,
            date TEXT NOT NULL,
            message_type TEXT NOT NULL,
            FOREIGN KEY (user_id) REFERENCES users(user_id)
        )''')

        conn.commit()
        logger.info("Database initialized")


class Database:
    def __init__(self, db_file='bot_database.db'):
        self.conn = sqlite3.connect(db_file)
        self.conn.row_factory = sqlite3.Row  # –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–æ–ª—è–º –ø–æ –∏–º–µ–Ω–∏

    def _add_user(self, user: types.User):
        """–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        current_time = datetime.now().isoformat()
        cursor = self.conn.cursor()

        cursor.execute('''
        INSERT INTO users 
            (user_id, username, first_name, last_name, language_code, is_bot, registration_date, last_activity)
        VALUES
            (?, ?, ?, ?, ?, ?, ?, ?)
        ON CONFLICT(user_id) DO UPDATE SET
            username = excluded.username,
            last_name = excluded.last_name,
            last_activity = excluded.last_activity
        ''', (
            user.id,
            user.username,
            user.first_name,
            user.last_name,
            user.language_code,
            int(user.is_bot),
            current_time,
            current_time
        ))
        self.conn.commit()
        logger.debug(f"User updated: {user.id} {user.username}")

    def add_message(self, message: types.Message):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ª—é–±–æ–≥–æ —Ç–∏–ø–∞"""
        cursor = self.conn.cursor()

        # –î–æ–±–∞–≤–ª—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self._add_user(message.from_user)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
        content_type = message.content_type
        text = message.text or message.caption or ""

        cursor.execute('''
        INSERT INTO messages 
            (user_id, chat_id, text, date, message_type)
        VALUES
            (?, ?, ?, ?, ?)
        ''', (
            message.from_user.id,
            message.chat.id,
            text,
            message.date.isoformat(),
            content_type
        ))
        self.conn.commit()
        logger.debug(f"Message saved: {message.message_id}")

    def get_user_info(self, user_id: int):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        cursor = self.conn.cursor()
        cursor.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
        return cursor.fetchone()

    def close(self):
        self.conn.close()


async def main():
    init_db()
    db = Database()
    bot = Bot(token="7696861095:AAFhJHqpzKAjqkU2n9mNu5jplqvtGMPbj7Y")
    dp = Dispatcher()

    @dp.message(Command("start"))
    async def cmd_start(message: types.Message):
        try:
            user = message.from_user
            db._add_user(user)
            await message.reply(
                f"–ü—Ä–∏–≤–µ—Ç, {user.full_name}!\n"
                "–Ø –±—É–¥—É —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –≤—Å–µ —Ç–≤–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π /me –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–≤–æ–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏",
                parse_mode=ParseMode.HTML
            )
        except Exception as e:
            logger.error(f"Error in /start: {e}")

    @dp.message(Command("me"))
    async def cmd_me(message: types.Message):
        try:
            user_info = db.get_user_info(message.from_user.id)
            if user_info:
                response = (
                    "üìã –í–∞—à–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n"
                    f"ID: {user_info['user_id']}\n"
                    f"–ò–º—è: {user_info['first_name']}\n"
                    f"–§–∞–º–∏–ª–∏—è: {user_info['last_name'] or '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
                    f"Username: @{user_info['username'] or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
                    f"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {user_info['registration_date']}"
                )
            else:
                response = "‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"

            await message.reply(response, parse_mode=ParseMode.HTML)
        except Exception as e:
            logger.error(f"Error in /me: {e}")

    @dp.message()
    async def handle_all_messages(message: types.Message):
        try:
            db.add_message(message)
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.from_user.id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")

    try:
        await dp.start_polling(bot)
    finally:
        db.close()
        await bot.close()


if __name__ == "__main__":
    asyncio.run(main())
